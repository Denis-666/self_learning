
'''
2.3.1 参数种类
函数参数分为可变类型和不可变类型，其调用结果是不同的。
（1）可变类型：类似c++的引用传递，如列表、字典等。如果传递的参数是可变类型，则在函数内部对传入参数的修改会影响到外部变量。
（2）不可变类型：类似c++的值传递，如整数、字符串、元组等。如果传递的参数是不可变类型，则在函数内部对传入参数的修改不会影响到外部变量。

可变：列表，字典
不可变：整数，字符串，元组

'''

# 不可变类型参数实例：

# def change_int(a):
#     a = 10

# b = 2
# change_int(b)
# print(b)  # 结果是2

'''
上述实例中，有int类型的对象2，指向它的变量是b。在传递给change_int（）函数时，按传值方式复制了变量b，a和b都指向了同一个int对象。在a=10时，则新生成一个int值对象10，并让a指向它。
一个更详细的例子，用id打印出变量的内存地址，可以看出函数内核函数外的内存发生了变化，说明用的是不同的内存单元，存放不同的数据：
'''

def func(a):
    print('id(a)1:',id(a))
    a = 20
    print('id(a)2:',id(a))
    
    


b = 2
print('id(b)1:',id(b))
func(b)
print('id(b)2:',id(b))





# 可变类型参数实例：

def change_int(my_list):
    "修改传入的列表"
    my_list.append([1, 2, 3])
    print("函数内修改后的变量：", my_list)


my_list = [10, 20, 30]
change_int(my_list)
print("函数外变量的值：", my_list)


'''
在调用函数时，如果传入的参数是可变类型，则外部变量也会被更改。在上述例子中，传入函数的list对象和在末尾添加新内容的mylist对象用的是同一个引用。
从下图中内存地址可以看出，变量的内存地址没有发生变化，说明是用的同一块内存：'''


'''
1.在定义函数时，开发者把参数的名字和位置确定后，函数的接口定义就完成了。
2.Python语言的函数定义非常简单，但灵活度却非常大。
3.函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。
3.想让函数传递实参的方式有很多，可使用位置实参，要求传入参数和定义参数的顺序相同；也可使用关键字实参，每个实参都由变量名和值组成
'''

